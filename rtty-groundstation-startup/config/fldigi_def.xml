<FLDIGI_DEFS>

<!-- type: bool; default: false
Save current configuration on exit -->
<SAVECONFIG>0</SAVECONFIG>

<!-- type: bool; default: false
Noise test on/off -->
<NOISETEST>0</NOISETEST>

<!-- type: double; default: +20.0
Signal to Noise ratio for test -->
<SIGNAL2NOISE>20</SIGNAL2NOISE>

<!-- type: bool; default: false
RSID detector searches the entire passband -->
<RSIDWIDESEARCH>0</RSIDWIDESEARCH>

<!-- type: int; default: 5
RSID detection opens squelch for nn seconds -->
<RSIDSQUELCH>5</RSIDSQUELCH>

<!-- type: bool; default: false
Enable Reed Soloman ID decoding -->
<RECEIVERSID>1</RECEIVERSID>

<!-- type: bool; default: false
Send RSID at beginning and end of transmission -->
<TRANSMITRSID>0</TRANSMITRSID>

<!-- type: bool; default: true
Append marker (for the previous modem and frequency) to the RX text
widget before changing to the new modem and/or frequency -->
<RSIDMARK>1</RSIDMARK>

<!-- type: bool; default: false
Trigger RSID notifications but do not change modem and frequency -->
<RSIDNOTIFYONLY>0</RSIDNOTIFYONLY>

<!-- type: bool; default: false
Disable RSID detection when RsID signal is detected -->
<RSIDAUTODISABLE>0</RSIDAUTODISABLE>

<!-- type: bool; default: false
Transmit an RSID signal when modem data is concluded -->
<RSIDPOST>0</RSIDPOST>

<!-- type: mode_set_t; default: mode_set_t()
Mode names for which RSID reception is disabled -->
<RSIDRXMODESEXCLUDE>,</RSIDRXMODESEXCLUDE>

<!-- type: mode_set_t; default: mode_set_t()
Mode names for which RSID transmission is disabled -->
<RSIDTXMODESEXCLUDE>CW,BPSK-31,RTTY,,</RSIDTXMODESEXCLUDE>

<!-- type: bool; default: true
Disable expensive processing in some decoders -->
<SLOWCPU>1</SLOWCPU>

<!-- type: double; default: -20.0
Waterfall reference level (dB) -->
<WFREFLEVEL>-20</WFREFLEVEL>

<!-- type: double; default: 70.0
Waterfall amplitude span (dB) -->
<WFAMPSPAN>70</WFAMPSPAN>

<!-- type: bool; default: false
WF_UI - enable reverse button -->
<WF_UIREV>0</WF_UIREV>

<!-- type: bool; default: false
WF_UI - enable scale multiplication button -->
<WF_UIX1>0</WF_UIX1>

<!-- type: bool; default: false
WF_UI - enable wf carrier button -->
<WF_UIWFCARRIER>0</WF_UIWFCARRIER>

<!-- type: bool; default: false
WF_UI - enable wf shift buttons -->
<WF_UIWFSHIFT>0</WF_UIWFSHIFT>

<!-- type: bool; default: false
WF_UI - enable rf level and range controls -->
<WF_UIWFREFLEVEL>0</WF_UIWFREFLEVEL>

<!-- type: bool; default: false
WF_UI - enable wf drop rate control -->
<WF_UIWFDROP>0</WF_UIWFDROP>

<!-- type: bool; default: false
WF_UI - enable wf amp span control -->
<WF_UIWFAMPSPAN>0</WF_UIWFAMPSPAN>

<!-- type: bool; default: false
WF_UI - enable wf memory store button -->
<WF_UIWFSTORE>0</WF_UIWFSTORE>

<!-- type: bool; default: false
WF_UI - enable wf mode control -->
<WF_UIWFMODE>0</WF_UIWFMODE>

<!-- type: bool; default: false
WF_UI - enable wf qsy button -->
<WF_UIQSY>0</WF_UIQSY>

<!-- type: bool; default: false
WF_UI - enable wf transmit lock button -->
<WF_UIXMTLOCK>0</WF_UIXMTLOCK>

<!-- type: int; default: 0
Lowest frequency shown on waterfall (Hz) -->
<LOWFREQCUTOFF>0</LOWFREQCUTOFF>

<!-- type: int; default: 3000
Highest frequency shown on waterfall (Hz) -->
<HIGHFREQCUTOFF>3000</HIGHFREQCUTOFF>

<!-- type: double; default: 1000
Default CW tracking point (Hz) -->
<CWSWEETSPOT>1000</CWSWEETSPOT>

<!-- type: double; default: 1000
Default RTTY tracking point (Hz) -->
<RTTYSWEETSPOT>1000</RTTYSWEETSPOT>

<!-- type: double; default: 1000
Default tracking point for all other modems (Hz) -->
<PSKSWEETSPOT>1000</PSKSWEETSPOT>

<!-- type: bool; default: false
Always start new modems at sweet spot frequencies -->
<STARTATSWEETSPOT>0</STARTATSWEETSPOT>

<!-- type: bool; default: false
Select if waterfall should compensate for BFO offset in CW -->
<CWOFFSET>0</CWOFFSET>

<!-- type: bool; default: false
Select if BFO is injected as LSB instead of USB -->
<CWISLSB>0</CWISLSB>

<!-- type: bool; default: false
Replay audio history when changing frequency by clicking on
the waterfall -->
<WATERFALLHISTORYDEFAULT>0</WATERFALLHISTORYDEFAULT>

<!-- type: bool; default: false
Change rig frequency by dragging the mouse cursor on the waterfall
frequency scale area -->
<WATERFALLQSY>0</WATERFALLQSY>

<!-- type: bool; default: false
Insert text to the RX text widget when changing frequency by left
clicking on the waterfall -->
<WATERFALLCLICKINSERT>0</WATERFALLCLICKINSERT>

<!-- type: std::string; default: &quot;\n&lt;FREQ&gt;\n&quot;
Waterfall left click text for WATERFALLCLICKINSERT -->
<WATERFALLCLICKTEXT>
&lt;FREQ&gt;
</WATERFALLCLICKTEXT>

<!-- type: int; default: waterfall::WF_CARRIER
Describes how waterfall mouse wheel events are handled
  0: do nothing; 1: change AFC width or decoder bandwidth;
  2: signal search; 3: change squelch level; 4: change modem carrier;
  5: change modem; 6: scroll visible area.  The default is 4. -->
<WATERFALLWHEELACTION>4</WATERFALLWHEELACTION>

<!-- type: bool; default: false
Print Rx in lowercase for CW, RTTY, CONTESTIA and THROB -->
<RX_LOWERCASE>0</RX_LOWERCASE>

<!-- type: int; default: 0
Not configurable; must always be 0 -->
<PSKFILTER>0</PSKFILTER>

<!-- type: bool; default: true
Enable psk multi-channel detector - disable for very slow cpus -->
<PSKBROWSER_ON>1</PSKBROWSER_ON>

<!-- type: int; default: 50
PSK signal acquisition search range (Hz) -->
<PSKSEARCHRANGE>50</PSKSEARCHRANGE>

<!-- type: double; default: 9.0
PSK signal acquisition S/N (dB) -->
<ACQSN>9</ACQSN>

<!-- type: bool; default: false
Send s2n report to pskmail client/server -->
<PSKMAILS2NREPORT>0</PSKMAILS2NREPORT>

<!-- type: bool; default: true
Behaviour of status (S/N and IMD) fields:
  0: Clear after timeout
  1: Dim after timeout
 -->
<STATUSDIM>1</STATUSDIM>

<!-- type: double; default: 15.0
Dim or Clear timeout (seconds) -->
<STATUSTIMEOUT>15</STATUSTIMEOUT>

<!-- type: bool; default: false
Reset to carrier when no signal is present -->
<PSKMAILSWEETSPOT>0</PSKMAILSWEETSPOT>

<!-- type: int; default: 50
Listen for signals within this range (Hz) -->
<PSKSERVEROFFSET>50</PSKSERVEROFFSET>

<!-- type: int; default: 1500
Default PSKMail listen / transmit frequency -->
<PSKSERVERCARRIER>1500</PSKSERVERCARRIER>

<!-- type: int; default: 25
Limit AFC movement to this range (Hz) -->
<PSKSERVERAFCRANGE>25</PSKSERVERAFCRANGE>

<!-- type: double; default: 9.0
Acquisition S/N (dB) -->
<PSKSERVERACGSN>9</PSKSERVERACGSN>

<!-- type: int; default: 3
Carrier shift (Hz). Values are as follows:
  0: 23; 1: 85; 2: 160; 3: 170; 4: 182; 5: 200; 6: 240; 7: 350;
  8: 425; 9: 850; -1: custom -->
<RTTYSHIFT>9</RTTYSHIFT>

<!-- type: int; default: 450
Custom shift (Hz) -->
<RTTYCUSTOMSHIFT>880</RTTYCUSTOMSHIFT>

<!-- type: double; default: 68.0
Receive filter bandwidth (Hz) -->
<RTTYBW>300</RTTYBW>

<!-- type: bool; default: true
Was RTTY_BW set automatically? -->
<RTTYBW>1</RTTYBW>

<!-- type: int; default: 0
Carrier baud rate. Values are as follows:
  1: 45; 1: 45.45; 2: 50; 3: 56; 4: 75; 5: 100; 6: 110; 7: 150; 
  8: 200; 9: 300 -->
<RTTYBAUD>9</RTTYBAUD>

<!-- type: int; default: 0
Bits per character. Values are as follows:
  0: 5 (baudot); 1: 7 (ascii); 2: 8 (ascii) -->
<RTTYBITS>2</RTTYBITS>

<!-- type: int; default: RTTY_PARITY_NONE
Parity. Values are as folows:
  0: none; 1: even; 2: odd: 3: zero; 4: one -->
<RTTYPARITY>0</RTTYPARITY>

<!-- type: int; default: 1
Stop bits. Values are as folows:
  0: 1; 1: 1.5; 2: 2 -->
<RTTYSTOP>2</RTTYSTOP>

<!-- type: bool; default: false
This setting is currently unused -->
<RTTYREVERSE>0</RTTYREVERSE>

<!-- type: bool; default: false
This setting is currently unused -->
<RTTYMSBFIRST>0</RTTYMSBFIRST>

<!-- type: bool; default: false
Use "CR CR LF" for "CR LF" -->
<RTTYCRCLF>0</RTTYCRCLF>

<!-- type: bool; default: true
Automatically add CRLF after `page width' characters -->
<RTTYAUTOCRLF>1</RTTYAUTOCRLF>

<!-- type: int; default: 72
Page width for RTTYAUTOCRLF -->
<RTTYAUTOCOUNT>72</RTTYAUTOCOUNT>

<!-- type: int; default: 1
AFC tracking speed. Values are as follows:
  0: slow; 1: normal; 2: fast -->
<RTTYAFCSPEED>1</RTTYAFCSPEED>

<!-- type: bool; default: false
Default to crosshair digiscope -->
<PREFERXHAIRSCOPE>0</PREFERXHAIRSCOPE>

<!-- type: bool; default: false
Generate Pseudo-FSK signal on right audio channel -->
<PSEUDOFSK>0</PSEUDOFSK>

<!-- type: bool; default: true
Revert to unshifted chars on a space (RX) -->
<UOSRX>1</UOSRX>

<!-- type: bool; default: true
Revert to unshifted chars on a space (TX) -->
<UOSTX>1</UOSTX>

<!-- type: bool; default: true
Use MARK frequency for logging -->
<USEMARKFREQ>1</USEMARKFREQ>

<!-- type: bool; default: false
This setting is currently unused -->
<XAGC>0</XAGC>

<!-- type: int; default: 50
Dot to dot-space ratio -->
<CWWEIGHT>50</CWWEIGHT>

<!-- type: int; default: 18
Transmit speed (WPM) -->
<CWSPEED>18</CWSPEED>

<!-- type: int; default: 18
Speed for Farnsworth timing (WPM) -->
<CWFARNSWORTH>18</CWFARNSWORTH>

<!-- type: bool; default: false
Use Farnsworth timing -->
<CWUSEFARNSWORTH>0</CWUSEFARNSWORTH>

<!-- type: int; default: 24
Default speed (WPM) -->
<CWDEFSPEED>24</CWDEFSPEED>

<!-- type: int; default: 150
Filter bandwidth (Hz) -->
<CWBANDWIDTH>150</CWBANDWIDTH>

<!-- type: double; default: 0.4
Detector hysterisis, lower threshold -->
<CWLOWER>0.4</CWLOWER>

<!-- type: double; default: 0.6
Detector hysterisis, upper threshold -->
<CWUPPER>0.6</CWUPPER>

<!-- type: int; default: 100
Matched Filter length -->
<CWMFILTLEN>100</CWMFILTLEN>

<!-- type: bool; default: true
Automatic receive speed tracking -->
<CWTRACK>1</CWTRACK>

<!-- type: bool; default: false
Matched Filter in use -->
<CWMFILT>0</CWMFILT>

<!-- type: bool; default: false
Use FFT overlap and add convolution filter -->
<CWUSEFFTFILTER>0</CWUSEFFTFILTER>

<!-- type: bool; default: false
Self Organizing Map decoding -->
<CWUSESOMDECODING>0</CWUSESOMDECODING>

<!-- type: int; default: 10
Tracking range for CWTRACK (WPM) -->
<CWRANGE>10</CWRANGE>

<!-- type: int; default: 5
Lower RX limit (WPM) -->
<CWLOWERLIMIT>5</CWLOWERLIMIT>

<!-- type: int; default: 50
Upper TX limit (WPM) -->
<CWUPPERLIMIT>50</CWUPPERLIMIT>

<!-- type: double; default: 4.0
Leading and trailing edge rise times (milliseconds) -->
<CWRISETIME>4</CWRISETIME>

<!-- type: double; default: 3.0
Dash to dot ratio -->
<CWDASH2DOT>3</CWDASH2DOT>

<!-- type: bool; default: false
Generate QSK signal on right audio channel -->
<QSK>0</QSK>

<!-- type: double; default: 4.0
Pre-keydown timing (milliseconds) -->
<CWPRE>4</CWPRE>

<!-- type: double; default: 4.0
Post-keydown timing (milliseconds) -->
<CWPOST>4</CWPOST>

<!-- type: bool; default: false
Send callsign in CW at the end of every transmission -->
<CWID>0</CWID>

<!-- type: int; default: 18
CW ID speed (WPM) -->
<IDWPM>18</IDWPM>

<!-- type: mode_set_t; default: mode_set_t()
Mode names for which CWID transmission is disabled -->
<CWIDMODESEXCLUDE>CW,,</CWIDMODESEXCLUDE>

<!-- type: bool; default: false
Send a continuous stream of test characters as the QSK signal -->
<QSKADJUST>0</QSKADJUST>

<!-- type: int; default: 0
Test character for QSKADJUST (ASCII value) -->
<TESTCHAR>0</TESTCHAR>

<!-- type: int; default: 0
QSK edge shape. Values are as follows:
  0: Hanning; 1: Blackman.
Raised cosine = Hanning.
 -->
<QSKSHAPE>0</QSKSHAPE>

<!-- type: bool; default: false
Weight decreases with increasing edge timing -->
<CWNARROW>0</CWNARROW>

<!-- type: bool; default: false
Use open paren character; typically used in MARS ops -->
<CWUSEPAREN>0</CWUSEPAREN>

<!-- type: std::string; default: &quot;=~&lt;&gt;%+&amp;{}&quot;
CW prosigns BT AA AS AR SK KN INT HM VE -->
<CWPROSIGNS>=~&lt;&gt;%+&amp;{}</CWPROSIGNS>

<!-- type: double; default: 245.0
Feld Hell working bandwidth -->
<HELL_BW0>245</HELL_BW0>

<!-- type: double; default: 245.0
FH bandwidth -->
<HELL_BW1>245</HELL_BW1>

<!-- type: double; default: 30.0
Slow Hell bandwidth -->
<HELL_BW2>30</HELL_BW2>

<!-- type: double; default: 1225.
X5 Hell bandwidth -->
<HELL_BW3>1225</HELL_BW3>

<!-- type: double; default: 2205.0
X9 Hell bandwidth -->
<HELL_BW4>2205</HELL_BW4>

<!-- type: double; default: 180.0
FSK Hell bandwidth -->
<HELL_BW5>180</HELL_BW5>

<!-- type: double; default: 100.0
FSK105 Hell bandwidth -->
<HELL_BW6>100</HELL_BW6>

<!-- type: double; default: 450.0
HELL80 bandwidth -->
<HELL_BW7>450</HELL_BW7>

<!-- type: bool; default: false
Halve receive width (compress RX in time) -->
<HELLRCVWIDTH>0</HELLRCVWIDTH>

<!-- type: bool; default: false
Display RX in reverse video -->
<HELLBLACKBOARD>0</HELLBLACKBOARD>

<!-- type: int; default: 1
Transmit width (number of multiple scans per character line) -->
<HELLXMTWIDTH>1</HELLXMTWIDTH>

<!-- type: bool; default: false
Transmit periods (.) when idle -->
<HELLXMTIDLE>0</HELLXMTIDLE>

<!-- type: bool; default: false
Raised cosine pulse shape factor. Values are as follows:
  0: slow (4 ms); 1: fast (2 ms). -->
<HELLPULSEFAST>0</HELLPULSEFAST>

<!-- type: int; default: 2
Number of tones. Values are as follows:
  0: 2; 1: 4; 2: 8; 3: 16; 4: 32; 5: 64; 6: 128; 7: 256 -->
<OLIVIATONES>2</OLIVIATONES>

<!-- type: int; default: 2
Bandwidth (Hz). Values are as follows:
  0: 125; 1: 250; 2: 500; 3: 1000; 4: 2000. -->
<OLIVIABW>2</OLIVIABW>

<!-- type: int; default: 8
Tune margin (tone frequency spacing) -->
<OLIVIASMARGIN>8</OLIVIASMARGIN>

<!-- type: int; default: 4
Integration period (FEC blocks) -->
<OLIVIASINTEG>4</OLIVIASINTEG>

<!-- type: bool; default: true
8-bit extended characters -->
<OLIVIA8BIT>1</OLIVIA8BIT>

<!-- type: int; default: 2
Number of tones. Values are as follows:
  0: 2; 1: 4; 2: 8; 3: 16; 4: 32; 5: 64; 6: 128; 7: 256 -->
<CONTESTIATONES>2</CONTESTIATONES>

<!-- type: int; default: 2
Bandwidth (Hz). Values are as follows:
  0: 125; 1: 250; 2: 500; 3: 1000; 4: 2000. -->
<CONTESTIABW>2</CONTESTIABW>

<!-- type: int; default: 8
Tune margin (tone frequency spacing) -->
<CONTESTIASMARGIN>8</CONTESTIASMARGIN>

<!-- type: int; default: 4
Integration period (FEC blocks) -->
<CONTESTIASINTEG>4</CONTESTIASINTEG>

<!-- type: bool; default: true
8-bit extended characters -->
<CONTESTIA8BIT>1</CONTESTIA8BIT>

<!-- type: double; default: 2.0
Filter bandwidth factor (bandwidth relative to signal width) -->
<THORBW>2</THORBW>

<!-- type: bool; default: true
Enable filtering before decoding -->
<THORFILTER>1</THORFILTER>

<!-- type: std::string; default: &quot;&quot;
Secondary text (sent during keyboard idle times) -->
<THORSECTEXT>KC1EAI </THORSECTEXT>

<!-- type: int; default: 5
This setting is currently unused -->
<THORPATHS>5</THORPATHS>

<!-- type: double; default: 0.0
CWI threshold (CWI detection and suppression) -->
<THORCWI>0</THORCWI>

<!-- type: bool; default: true
Detect THOR preamble (and flush Rx pipeline) -->
<THORPREAMBLE>1</THORPREAMBLE>

<!-- type: bool; default: true
Enable Soft-symbol decoding -->
<THORSOFTSYMBOLS>1</THORSOFTSYMBOLS>

<!-- type: bool; default: true
Enable Soft-bit decoding -->
<THORSOFTBITS>1</THORSOFTBITS>

<!-- type: int; default: 0
Packet baud rate. Values are as follows:
  0: 1200 (V/UHF); 1: 300 (HF); 2: 2400 (V/UHF) -->
<PKTBAUDSELECT>0</PKTBAUDSELECT>

<!-- type: double; default: 0.0
Signal gain for lower frequency (Mark) tone (in dB) -->
<LOSIGRXGAIN>0</LOSIGRXGAIN>

<!-- type: double; default: 0.0
Signal gain for higher frequency (Space) tone (in dB) -->
<HISIGRXGAIN>0</HISIGRXGAIN>

<!-- type: double; default: 0.0
Signal gain for Mark (lower frequency) tone (in dB) -->
<LOSIGTXGAIN>0</LOSIGTXGAIN>

<!-- type: double; default: 0.0
Signal gain for Space (higher frequency) tone (in dB) -->
<HISIGTXGAIN>0</HISIGTXGAIN>

<!-- type: bool; default: false
Default to syncscope (detected symbol scope) -->
<PKTPREFERXHAIRSCOPE>0</PKTPREFERXHAIRSCOPE>

<!-- type: bool; default: false
No extra input gain (similar to Mic Boost) by default -->
<PKTAUDIOBOOST>0</PKTAUDIOBOOST>

<!-- type: bool; default: false
No timestamps on RX packets by default -->
<PKTRXTIMESTAMP>0</PKTRXTIMESTAMP>

<!-- type: bool; default: false
decode received Mic-E data -->
<PKTEXPANDMICE>0</PKTEXPANDMICE>

<!-- type: bool; default: false
decode received PHG data -->
<PKTEXPANDPHG>0</PKTEXPANDPHG>

<!-- type: bool; default: false
decode received Compressed Position data -->
<PKTEXPANDCMP>0</PKTEXPANDCMP>

<!-- type: bool; default: false
display decoded data in SI units -->
<PKTUNITSSI>0</PKTUNITSSI>

<!-- type: bool; default: false
display decoded data in English units -->
<PKTUNITSENGLISH>0</PKTUNITSENGLISH>

<!-- type: double; default: 2.0
Filter bandwidth factor (bandwidth relative to signal width) -->
<DOMINOEXBW>2</DOMINOEXBW>

<!-- type: double; default: 0.0
Adjust tone-spacing -->
<DOMINOEXADJ>0</DOMINOEXADJ>

<!-- type: std::string; default: &quot;&quot;
Secondary text (sent during keyboard idle times) -->
<SECONDARYTEXT>KC1EAI </SECONDARYTEXT>

<!-- type: bool; default: true
Enable filtering before decoding -->
<DOMINOEXFILTER>1</DOMINOEXFILTER>

<!-- type: bool; default: false
Enable MultiPSK-compatible FEC -->
<DOMINOEXFEC>0</DOMINOEXFEC>

<!-- type: int; default: 5
This setting is currently unused -->
<DOMINOEXPATHS>5</DOMINOEXPATHS>

<!-- type: double; default: 0.0
CWI threshold (CWI detection and suppression) -->
<DOMCWI>0</DOMCWI>

<!-- type: bool; default: true
8-bit extended characters -->
<MT638BIT>1</MT638BIT>

<!-- type: int; default: 64
64-bit (long) interleave.  Values are as follows:
  0: short (32-bit); 1: long (64-bit). -->
<MT63INTERLEAVE>64</MT63INTERLEAVE>

<!-- type: bool; default: false
Long receive integration -->
<MT63INTEGRATION>0</MT63INTEGRATION>

<!-- type: bool; default: true
Also transmit upper start tone (only if MT63USETONES is enabled) -->
<MT63TWOTONES>1</MT63TWOTONES>

<!-- type: bool; default: true
Transmit lower start tone -->
<MT63USETONES>1</MT63USETONES>

<!-- type: int; default: 4
Tone duration (seconds) -->
<MT63TONEDURATION>4</MT63TONEDURATION>

<!-- type: bool; default: false
Always transmit lowest tone at 500 Hz -->
<MT63AT500>0</MT63AT500>

<!-- type: int; default: 1
Waterfal FFT prefilter window function. Values are as follows:
  0: Rectangular; 1: Blackman; 2: Hamming; 3: Hanning; 4: Triangular -->
<WFPREFILTER>1</WFPREFILTER>

<!-- type: bool; default: false
Use FFT averaging to decrease waterfall noise -->
<WFAVERAGING>0</WFAVERAGING>

<!-- type: int; default: 4
Waterfal FFT latency (scan merging) -->
<LATENCY>4</LATENCY>

<!-- type: bool; default: true
Draw cursor with vertical lines -->
<USECURSORLINES>1</USECURSORLINES>

<!-- type: bool; default: true
Draw cursor center line -->
<USECURSORCENTERLINE>1</USECURSORCENTERLINE>

<!-- type: bool; default: true
Draw bandwidth marker with vertical lines -->
<USEBWTRACKS>1</USEBWTRACKS>

<!-- type: bool; default: false
Draw bandwidth marker with 3x vertical lines -->
<USEWIDETRACKS>0</USEWIDETRACKS>

<!-- type: bool; default: false
Draw cursor with 3x vertical lines -->
<USEWIDECURSOR>0</USEWIDECURSOR>

<!-- type: bool; default: false
Draw center line marker with 3x vertical lines -->
<USEWIDECENTER>0</USEWIDECENTER>

<!-- type: RGBI; default: {255, 255, 0, 255}
Color of cursor lines (RGBI) -->
<CLCOLORS>255 255 0</CLCOLORS>

<!-- type: RGBI; default: {255, 255, 255, 255}
Color of cursor center line (RGBI) -->
<CCCOLORS>255 255 255</CCCOLORS>

<!-- type: RGBI; default: {255, 0, 0, 255}
Color of bandwidth marker (RGBI) -->
<BWTCOLORS>255 0 0</BWTCOLORS>

<!-- type: RGBI; default: {255, 255, 255, 255}
Color of notch marker (RGBI) -->
<NOTCHCOLORS>255 255 255</NOTCHCOLORS>

<!-- type: RGBI; default: {255, 120, 0, 255}
Color of RTTY MARK freq marker (RGBI) -->
<RTTYMARKRGBI>255 120 0</RTTYMARKRGBI>

<!-- type: int; default: 4
Index of raster font used for transmission -->
<FELDFONTNBR>4</FELDFONTNBR>

<!-- type: bool; default: false
Show transmit signal on waterfall -->
<VIEWXMTSIGNAL>0</VIEWXMTSIGNAL>

<!-- type: bool; default: false
Send video ID containing modem name -->
<SENDID>0</SENDID>

<!-- type: bool; default: false
This setting is currently unused -->
<MACROID>0</MACROID>

<!-- type: bool; default: false
Send video ID containing arbitrary text -->
<SENDTEXTID>0</SENDTEXTID>

<!-- type: std::string; default: &quot;CQ&quot;
Video ID text for SENDTEXTID (keep short!) -->
<STRTEXTID>CQ</STRTEXTID>

<!-- type: double; default: 0.0
Single tone at center of modem BW, carrier detect for amplifiers -->
<PRETONE>0</PRETONE>

<!-- type: bool; default: false
Decode received DTMF tones -->
<DTMFDECODE>0</DTMFDECODE>

<!-- type: int; default: 1
Video ID text width (characters per row) -->
<VIDEOWIDTH>1</VIDEOWIDTH>

<!-- type: bool; default: true
Limit video width to 500 Hz -->
<VIDLIMIT>1</VIDLIMIT>

<!-- type: bool; default: true
Limit video width to mode bandwidth -->
<VIDMODELIMIT>1</VIDMODELIMIT>

<!-- type: bool; default: true
Use small video ID font -->
<IDSMALL>1</IDSMALL>

<!-- type: mode_set_t; default: mode_set_t()
Mode names for which Video ID transmission is disabled -->
<VIDEOIDMODESEXCLUDE>CW,BPSK-31,RTTY,,</VIDEOIDMODESEXCLUDE>

<!-- type: bool; default: true
Docked rig control -->
<DOCKEDRIGCONTROL>1</DOCKEDRIGCONTROL>

<!-- type: int; default: 125
Waterfall height (pixels) -->
<WFHEIGHT>125</WFHEIGHT>

<!-- type: bool; default: true
Show tooltips -->
<TOOLTIPS>1</TOOLTIPS>

<!-- type: bool; default: false
Prompt to save log -->
<NAGME>0</NAGME>

<!-- type: bool; default: false
Clear log fields on save -->
<CLEARONSAVE>0</CLEARONSAVE>

<!-- type: bool; default: true
Sort log by date/time off -->
<SORTDATEOFF>1</SORTDATEOFF>

<!-- type: bool; default: false
Force date/time ON == OFF -->
<FORCEDATETIME>0</FORCEDATETIME>

<!-- type: bool; default: true
Show menu icons -->
<MENUICONS>1</MENUICONS>

<!-- type: mode_set_t; default: mode_set_t()
Modes that are not shown in the opmodes menu -->
<VISIBLEMODES>,</VISIBLEMODES>

<!-- type: bool; default: true
Double-click on RX text enters QSO data -->
<RXTEXTCLICKS>1</RXTEXTCLICKS>

<!-- type: bool; default: false
Show callsign tooltips in received text -->
<RXTEXTTOOLTIPS>0</RXTEXTTOOLTIPS>

<!-- type: bool; default: false
Auto-fill Country and Azimuth QSO fields -->
<AUTOFILLQSO>0</AUTOFILLQSO>

<!-- type: bool; default: true
Convert callsign field to upper case -->
<CALLUPPERCASE>1</CALLUPPERCASE>

<!-- type: bool; default: false
Default outgoing RST to 599 -->
<RSTDEFAULT>0</RSTDEFAULT>

<!-- type: bool; default: false
Default incoming RST to 599 -->
<RSTINDEFAULT>0</RSTINDEFAULT>

<!-- type: bool; default: true
Enable detection and extraction of "wrapped" text -->
<AUTOEXTRACT>1</AUTOEXTRACT>

<!-- type: bool; default: true
Open flmsg with the autoextract file -->
<OPEN_FLMSG>1</OPEN_FLMSG>

<!-- type: bool; default: true
Open flmsg with the autoextract file
print to browser
close flmsg -->
<OPEN_FLMSG_PRINT>1</OPEN_FLMSG_PRINT>

<!-- type: bool; default: false
Open NBEMS folder upon receipt of an autoextract file -->
<OPEN_NBEMS_FOLDER>0</OPEN_NBEMS_FOLDER>

<!-- type: std::string; default: &quot;&quot;
Full pathname to the flmsg executable -->
<FLMSG_PATHNAME></FLMSG_PATHNAME>

<!-- type: std::string; default: &quot;&quot;
Full pathname to the cty.dat data file -->
<CTYDAT_PATHNAME>/home/pi/.dl-fldigi/</CTYDAT_PATHNAME>

<!-- type: bool; default: false
Capture text to file 'talk/textout.txt' -->
<SPEAK>0</SPEAK>

<!-- type: bool; default: false
Connect to Digitalk socket server during program initialization -->
<AUTO_TALK>0</AUTO_TALK>

<!-- type: int; default: QRZXMLNONE
Callsign xml query type.  Values are as follows:
  0: none; 1: QRZ (paid sub.); 2: QRZ cdrom; 3: HamCall (paid sub.);
  4: callook free US calls xml service; 5: hamQTH free xml service.
  The default is none. -->
<QRZXMLTYPE>0</QRZXMLTYPE>

<!-- type: int; default: QRZWEBNONE
Callsign browser query type.  Values are as follows:
  0: none; 1: QRZ web browser; 2: HamCall web browser
  3: hamQTH web browser.
  The default is none. -->
<QRZWEBTYPE>0</QRZWEBTYPE>

<!-- type: std::string; default: &quot;&quot;
QRZ cdrom path -->
<QRZPATHNAME></QRZPATHNAME>

<!-- type: std::string; default: &quot;&quot;
QRZ or HamCall subscriber username -->
<QRZUSER></QRZUSER>

<!-- type: std::string; default: &quot;&quot;
QRZ or HamCall subscriber password -->
<QRZPASSWORD></QRZPASSWORD>

<!-- type: std::string; default: &quot;&quot;
eQSL login id -->
<EQSL_ID></EQSL_ID>

<!-- type: std::string; default: &quot;&quot;
eQSL login password -->
<EQSL_PASSWORD></EQSL_PASSWORD>

<!-- type: std::string; default: &quot;&quot;
eQSL nickname -->
<EQSL_NICKNAME></EQSL_NICKNAME>

<!-- type: std::string; default: &quot;&quot;
eQSl default message -->
<EQSL_DEF_MSG></EQSL_DEF_MSG>

<!-- type: bool; default: false
Send eQSL when other log action invoked -->
<EQSL_WHEN_LOGGED>0</EQSL_WHEN_LOGGED>

<!-- type: bool; default: false
Send logbook date/time off vice date on (default) -->
<EQSL_DATETIME_OFF>0</EQSL_DATETIME_OFF>

<!-- type: bool; default: true
This setting is currently unused -->
<BTNUSB>1</BTNUSB>

<!-- type: bool; default: false
RTS is PTT signal line -->
<RTSPTT>0</RTSPTT>

<!-- type: bool; default: false
DTR is PTT signal line -->
<DTRPTT>0</DTRPTT>

<!-- type: bool; default: false
Initial voltage on RTS is +V -->
<RTSPLUS>0</RTSPLUS>

<!-- type: bool; default: false
Initial voltage on DTR is +V -->
<DTRPLUS>0</DTRPLUS>

<!-- type: bool; default: false
Generate PTT signal on right audio channel -->
<PTTRIGHTCHANNEL>0</PTTRIGHTCHANNEL>

<!-- type: int; default: 0
Use MEMMAP rig control -->
<CHKUSEMEMMAPIS>0</CHKUSEMEMMAPIS>

<!-- type: int; default: 0
Use Hamlib rig control -->
<CHKUSEHAMLIBIS>0</CHKUSEHAMLIBIS>

<!-- type: int; default: 0
Use RigCAT rig control -->
<CHKUSERIGCATIS>0</CHKUSERIGCATIS>

<!-- type: int; default: 0
Use XML-RPC rig control -->
<CHKUSEXMLRPCIS>0</CHKUSEXMLRPCIS>

<!-- type: std::string; default: DEFAULT_PTTDEV
PTT device -->
<PTTDEV>/dev/ttyS0</PTTDEV>

<!-- type: std::string; default: DEFAULT_HAMRIGDEVICE
Hamlib rig device -->
<HAMRIGDEVICE>/dev/ttyS0</HAMRIGDEVICE>

<!-- type: std::string; default: &quot;&quot;
Hamlib rig name -->
<HAMRIGNAME></HAMRIGNAME>

<!-- type: int; default: 0
Hamlib rig model -->
<HAMRIGMODEL>0</HAMRIGMODEL>

<!-- type: std::string; default: &quot;&quot;
Hamlib configuration (param=val, ...) -->
<HAMCONFIG></HAMCONFIG>

<!-- type: int; default: 1
Hamlib rig baud rate. Values are as follows:
  0: 300; 1: 600; 2: 1200; 3: 2400; 4: 4800; 5: 9600; 6: 19200;
  7: 38400; 8: 57600; 9: 115200; 10: 230400; 11: 460800. -->
<HAMRIGBAUDRATE>1</HAMRIGBAUDRATE>

<!-- type: int; default: 2
Hamlib stopbits <1/2>. -->
<HAMRIGSTOPBITS>2</HAMRIGSTOPBITS>

<!-- type: std::string; default: &quot;&quot;
RigCAT XML file name -->
<XMLRIGFILENAME>/home/pi/.dl-fldigi/rig.xml</XMLRIGFILENAME>

<!-- type: std::string; default: DEFAULT_HAMRIGDEVICE
RigCAT device -->
<XMLRIGDEVICE>/dev/ttyS0</XMLRIGDEVICE>

<!-- type: int; default: 1
RigCAT rig baud rate.  See HAMRIGBAUDRATE. -->
<XMLRIGBAUDRATE>1</XMLRIGBAUDRATE>

<!-- type: int; default: 2
RigCAT stopbits. <1/2> -->
<RIGCATSTOPBITS>2</RIGCATSTOPBITS>

<!-- type: bool; default: false
Use separate device for PTT -->
<TTYPTT>0</TTYPTT>

<!-- type: bool; default: false
PTT via Hamlib command -->
<HAMLIBCMDPTT>0</HAMLIBCMDPTT>

<!-- type: bool; default: false
PTT via RigCAT command -->
<RIGCATCMDPTT>0</RIGCATCMDPTT>

<!-- type: bool; default: false
Use Memmap PTT -->
<MEMMAPPTT>0</MEMMAPPTT>

<!-- type: bool; default: false
Use uHRouter PTT (OS X only) -->
<USEUHROUTERPTT>0</USEUHROUTERPTT>

<!-- type: bool; default: false
Use parallel port PTT -->
<USEPPORTPTT>0</USEPPORTPTT>

<!-- type: bool; default: false
Initial state of RTS -->
<RIGCATRTSPLUS>0</RIGCATRTSPLUS>

<!-- type: bool; default: false
Initial state of DTR -->
<RIGCATDTRPLUS>0</RIGCATDTRPLUS>

<!-- type: bool; default: false
Toggle RTS for PTT -->
<RIGCATRTSPTT>0</RIGCATRTSPTT>

<!-- type: bool; default: false
Toggle DTR for PTT -->
<RIGCATDTRPTT>0</RIGCATDTRPTT>

<!-- type: bool; default: false
RTS/CTS flow control -->
<RIGCATRTSCTSFLOW>0</RIGCATRTSCTSFLOW>

<!-- type: int; default: 2
Number of retries before giving up -->
<RIGCATRETRIES>2</RIGCATRETRIES>

<!-- type: int; default: 10
Retry interval (milliseconds) -->
<RIGCATTIMEOUT>10</RIGCATTIMEOUT>

<!-- type: int; default: 50
Write delay (milliseconds) -->
<RIGCATWAIT>50</RIGCATWAIT>

<!-- type: bool; default: false
Commands are echoed -->
<RIGCATECHO>0</RIGCATECHO>

<!-- type: bool; default: false
VSP support enabled -->
<RIGCATVSP>0</RIGCATVSP>

<!-- type: bool; default: false
RTS +12 -->
<HAMLIBRTSPLUS>0</HAMLIBRTSPLUS>

<!-- type: bool; default: false
DTR +12 -->
<HAMLIBDTRPLUS>0</HAMLIBDTRPLUS>

<!-- type: bool; default: false
RTS/CTS flow control -->
<HAMLIBRTSCTSFLOW>0</HAMLIBRTSCTSFLOW>

<!-- type: bool; default: false
XON/XOFF flow control -->
<HAMLIBXONXOFFFLOW>0</HAMLIBXONXOFFFLOW>

<!-- type: int; default: 2
Number of times to resend command before giving up -->
<HAMLIBRETRIES>2</HAMLIBRETRIES>

<!-- type: int; default: 10
Retry interval (milliseconds) -->
<HAMLIBTIMEOUT>10</HAMLIBTIMEOUT>

<!-- type: int; default: 5
Wait interval before reading response (milliseconds) -->
<HAMLIBWAIT>5</HAMLIBWAIT>

<!-- type: int; default: 0
Write delay (milliseconds) -->
<HAMLIBWRITEDELAY>0</HAMLIBWRITEDELAY>

<!-- type: int; default: 0
Force the rig sideband (for the purpose of calculating frequencies).
Values are as follows: 0: as reported by rig; 1: LSB; 2: USB. -->
<HAMLIBSIDEBAND>0</HAMLIBSIDEBAND>

<!-- type: std::string; default: &quot;&quot;
Operator callsign -->
<MYCALL>KC1EAI</MYCALL>

<!-- type: std::string; default: &quot;&quot;
Operator QTH -->
<MYQTH></MYQTH>

<!-- type: std::string; default: &quot;&quot;
Operator name -->
<MYNAME>White Mountain Science, Inc</MYNAME>

<!-- type: std::string; default: &quot;&quot;
Operator Maidenhead locator -->
<MYLOC></MYLOC>

<!-- type: std::string; default: &quot;&quot;
Antenna description (keep short!) -->
<MYANTENNA></MYANTENNA>

<!-- type: int; default: SND_IDX_NULL
Audio subsystem.  Values are as follows:
  0: OSS; 1: PortAudio; 2: PulseAudio; 3: File I/O -->
<AUDIOIO>1</AUDIOIO>

<!-- type: std::string; default: &quot;&quot;
OSS device name -->
<OSSDEVICE></OSSDEVICE>

<!-- type: std::string; default: &quot;&quot;
For compatibility with older versions -->
<PADEVICE></PADEVICE>

<!-- type: std::string; default: &quot;&quot;
PortAudio input device name -->
<PORTINDEVICE>Loopback: PCM (hw:1,0)</PORTINDEVICE>

<!-- type: int; default: -1
PortAudio input device index -->
<PORTININDEX>1</PORTININDEX>

<!-- type: std::string; default: &quot;&quot;
PortAudio input device name -->
<PORTOUTDEVICE>default</PORTOUTDEVICE>

<!-- type: int; default: -1
PortAudio input device index -->
<PORTOUTINDEX>4</PORTOUTINDEX>

<!-- type: std::string; default: &quot;&quot;
PulseAudio server string -->
<PULSESERVER></PULSESERVER>

<!-- type: int; default: 1
Number of audio input channels -->
<INCHANNELS>1</INCHANNELS>

<!-- type: bool; default: false
Force use of mono audio output -->
<MONOAUDIO>0</MONOAUDIO>

<!-- type: bool; default: false
Duplicate modem signal on left & right -->
<SIGONRIGHTCHANNEL>0</SIGONRIGHTCHANNEL>

<!-- type: bool; default: false
Reverse left-right audio channels -->
<REVERSEAUDIO>0</REVERSEAUDIO>

<!-- type: int; default: SAMPLE_RATE_UNSET
For compatibility with older versions -->
<SAMPLERATE>-1</SAMPLERATE>

<!-- type: int; default: SAMPLE_RATE_UNSET
Input sample rate -->
<INSAMPLERATE>1</INSAMPLERATE>

<!-- type: int; default: SAMPLE_RATE_UNSET
Output sample rate -->
<OUTSAMPLERATE>1</OUTSAMPLERATE>

<!-- type: int; default: SRC_SINC_FASTEST
Sample rate conversion type. Values are as follows:
  0: Best SINC; 1: Medium SINC; 2: Fastest SINC; 3: ZOH; 4: Linear.
The default is 2. -->
<SAMPLECONVERTER>4</SAMPLECONVERTER>

<!-- type: int; default: 0
Input (RX) sample rate correction (PPM) -->
<RXCORR>0</RXCORR>

<!-- type: int; default: 0
Output (TX) sample rate correction (PPM) -->
<TXCORR>0</TXCORR>

<!-- type: int; default: 0
Difference between RX and TX freq (rig offset) -->
<TXOFFSET>0</TXOFFSET>

<!-- type: int; default: 0
Start of transmit delay before sending audio -->
<PTTONDELAY>0</PTTONDELAY>

<!-- type: int; default: 0
End of transmit delay before disabling PTT -->
<PTTOFFDELAY>0</PTTOFFDELAY>

<!-- type: std::string; default: &quot;&quot;
Logbook file name -->
<LOGBOOKFILENAME>/home/pi/.dl-fldigi/logs/logbook.adif</LOGBOOKFILENAME>

<!-- type: bool; default: false
Force RST in/out to 599 -->
<FIXED599>0</FIXED599>

<!-- type: bool; default: true
Insert leading zeros into transmitted serial number (contest) -->
<USELEADINGZEROS>1</USELEADINGZEROS>

<!-- type: bool; default: false
Send CW cut numbers -->
<CUTNBRS>0</CUTNBRS>

<!-- type: RGB; default: {185, 211, 238}
Background color of signal browser detect level -->
<BWSRSLIDERCOLOR>185 211 238</BWSRSLIDERCOLOR>

<!-- type: RGB; default: {54, 100, 139}
Button highlight color, signal browser detect level -->
<BWSRSLDRSELCOLOR>54 100 139</BWSRSLDRSELCOLOR>

<!-- type: RGB; default: {255, 110, 180}
Callsign background color when duplicate detected -->
<dupcolor>255 110 180</dupcolor>

<!-- type: bool; default: false
Check for duplicates (contest) -->
<ENABLEDUPCHECK>0</ENABLEDUPCHECK>

<!-- type: bool; default: true
Predicate for ENABLEDUPCHECK (mode must match) -->
<DUPMODE>1</DUPMODE>

<!-- type: bool; default: true
Predicate for ENABLEDUPCHECK (band must match) -->
<DUPBAND>1</DUPBAND>

<!-- type: bool; default: false
Predicate for ENABLEDUPCHECK (state must match) -->
<DUPSTATE>0</DUPSTATE>

<!-- type: bool; default: false
Predicate for ENABLEDUPCHECK (exchange must match) -->
<DUPXCHG1>0</DUPXCHG1>

<!-- type: bool; default: false
Predicate for ENABLEDUPCHECK (QSO inside timespan) -->
<DUPTIMESPAN>0</DUPTIMESPAN>

<!-- type: int; default: 120
Time for DUPTIMESPAN (minutes) -->
<TIMESPAN>120</TIMESPAN>

<!-- type: int; default: 0
Contest starting number -->
<CONTESTSTART>0</CONTESTSTART>

<!-- type: int; default: 4
Number of digits in serial number -->
<CONTESTDIGITS>3</CONTESTDIGITS>

<!-- type: std::string; default: &quot;*,-.;&quot;
Additional characters used to delimit WORDS -->
<NONWORDCHARS>*,-.;</NONWORDCHARS>

<!-- type: std::string; default: &quot;&quot;
Free form exchange -->
<MYXCGH></MYXCGH>

<!-- type: std::string; default: &quot;&quot;
TX power used for logbook entries -->
<TXPOWER></TXPOWER>

<!-- type: bool; default: false
Load last used macro file on startup -->
<USELASTMACRO>0</USELASTMACRO>

<!-- type: bool; default: false
Display macro filename on startup -->
<DISPLAYMACROFILENAME>0</DISPLAYMACROFILENAME>

<!-- type: bool; default: false
Save current macros on exit -->
<SAVEMACROS>0</SAVEMACROS>

<!-- type: bool; default: false
Enable mouse wheel rotation to control visible macro set -->
<MACROWHEEL>0</MACROWHEEL>

<!-- type: bool; default: true
Principal macro bar position, true=above wf, false=below -->
<MBAR1POS>1</MBAR1POS>

<!-- type: int; default: 0
Position second macro button above data stream panesl -->
<MBAR2POS>0</MBAR2POS>

<!-- type: std::string; default: &quot;&quot;
Mixer device -->
<MXDEVICE></MXDEVICE>

<!-- type: bool; default: false
Control the microphone mixer channel -->
<MICIN>0</MICIN>

<!-- type: bool; default: true
Control the line-in mixer channel -->
<LINEIN>1</LINEIN>

<!-- type: bool; default: false
Enable mixer controls -->
<ENABLEMIXER>0</ENABLEMIXER>

<!-- type: double; default: 0.8
PCM channel level -->
<PCMVOLUME>0.8</PCMVOLUME>

<!-- type: double; default: -3.0
TX attenuator (db) -30 .. 0 -->
<TXATTEN>-3</TXATTEN>

<!-- type: bool; default: true
This setting is currently unused -->
<MUTEINPUT>1</MUTEINPUT>

<!-- type: double; default: 0.5
Level for monitored (on watrerfall) transmit signal -->
<TXMONITORLEVEL>0.5</TXMONITORLEVEL>

<!-- type: std::string; default: &quot;default.pal&quot;
Waterfall color palette file name -->
<PALETTENAME>default.pal</PALETTENAME>

<!-- type: RGB; default: { 0,0,0 }
Custom palette 0 -->
<PALETTE0>0 0 0</PALETTE0>

<!-- type: RGB; default: { 0,0,136 }
Custom palette 1 -->
<PALETTE1>0 0 136</PALETTE1>

<!-- type: RGB; default: { 0,19,198 }
Custom palette 2 -->
<PALETTE2>0 19 198</PALETTE2>

<!-- type: RGB; default: { 0,32,239 }
Custom palette 3 -->
<PALETTE3>0 32 239</PALETTE3>

<!-- type: RGB; default: { 172,167,105 }
Custom palette 4 -->
<PALETTE4>172 167 105</PALETTE4>

<!-- type: RGB; default: { 194,198,49 }
Custom palette 5 -->
<PALETTE5>194 198 49</PALETTE5>

<!-- type: RGB; default: { 225,228,107 }
Custom palette 6 -->
<PALETTE6>225 228 107</PALETTE6>

<!-- type: RGB; default: { 255,255,0 }
Custom palette 7 -->
<PALETTE7>255 255 0</PALETTE7>

<!-- type: RGB; default: { 251,51,0 }
Custom palette 8 -->
<PALETTE8>251 51 0</PALETTE8>

<!-- type: bool; default: true
Use macro group colors -->
<USEGROUPCOLORS>1</USEGROUPCOLORS>

<!-- type: RGB; default: { 80, 144, 144 }
Macro group 1 color -->
<FKEYGROUP1>80 144 144</FKEYGROUP1>

<!-- type: RGB; default: { 144, 80, 80 }
Macro group 2 color -->
<FKEYGROUP2>144 80 80</FKEYGROUP2>

<!-- type: RGB; default: { 80, 80, 144 }
Macro group 3 color -->
<FKEYGROUP3>80 80 144</FKEYGROUP3>

<!-- type: RGB; default: { 255, 255, 255 }
Macro button foreground  -->
<FKEYTEXTCOLOR>255 255 255</FKEYTEXTCOLOR>

<!-- type: std::string; default: &quot;&quot;
RX text font name -->
<RXFONTNAME>mono</RXFONTNAME>

<!-- type: bool; default: true
Enable RX font warnings -->
<RXFONTWARN>1</RXFONTWARN>

<!-- type: Fl_Font; default: FL_COURIER
RX text font index -->
<RXFONTNBR>4</RXFONTNBR>

<!-- type: int; default: 16
RX text font size -->
<RXFONTSIZE>16</RXFONTSIZE>

<!-- type: Fl_Color; default: FL_BLACK
RX text font color -->
<RXFNTCOLOR>56</RXFNTCOLOR>

<!-- type: Fl_Color; default: FL_MAGENTA
RX/TX text select color -->
<RXTXSELCOLOR>248</RXTXSELCOLOR>

<!-- type: std::string; default: &quot;&quot;
TX text font name -->
<TXFONTNAME>mono</TXFONTNAME>

<!-- type: bool; default: true
Enable TX font warnings -->
<TXFONTWARN>1</TXFONTWARN>

<!-- type: Fl_Font; default: FL_COURIER
TX text font index -->
<TXFONTNBR>4</TXFONTNBR>

<!-- type: int; default: 16
TX text font size -->
<TXFONTSIZE>16</TXFONTSIZE>

<!-- type: Fl_Color; default: FL_BLACK
TX text font color -->
<TXFNTCOLOR>56</TXFNTCOLOR>

<!-- type: RGB; default: { 255, 242, 190 }
RX text font color (RGB) -->
<RXFONTCOLOR>255 242 190</RXFONTCOLOR>

<!-- type: RGB; default: { 200, 235, 255 }
TX text font color (RGB) -->
<TXFONTCOLOR>200 235 255</TXFONTCOLOR>

<!-- type: Fl_Color; default: FL_RED
Color for Transmit text style -->
<XMITCOLOR>88</XMITCOLOR>

<!-- type: Fl_Color; default: FL_DARK_GREEN
Color for Control text style -->
<CTRLCOLOR>60</CTRLCOLOR>

<!-- type: Fl_Color; default: FL_BLUE
Color for Skipped text style -->
<SKIPCOLOR>216</SKIPCOLOR>

<!-- type: Fl_Color; default: FL_DARK_MAGENTA
Color for Alternate text style -->
<ALTRCOLOR>152</ALTRCOLOR>

<!-- type: Fl_Color; default: FL_BLACK
Color for low signal level -->
<LOWSIGNAL>56</LOWSIGNAL>

<!-- type: Fl_Color; default: FL_GREEN
Color for normal signal level -->
<NORMSIGNAL>63</NORMSIGNAL>

<!-- type: Fl_Color; default: FL_YELLOW
Color for high signal level -->
<HIGHSIGNAL>95</HIGHSIGNAL>

<!-- type: Fl_Color; default: FL_RED
Color for over driven signal -->
<OVERSIGNAL>88</OVERSIGNAL>

<!-- type: std::string; default: &quot;&quot;
Waterfall font name -->
<WATERFALLFONTNAME>mono</WATERFALLFONTNAME>

<!-- type: Fl_Font; default: FL_COURIER
Waterfall font number -->
<WATERFALLFONTNBR>4</WATERFALLFONTNBR>

<!-- type: int; default: 12
Waterfall font size -->
<WATERFALLFONTSIZE>12</WATERFALLFONTSIZE>

<!-- type: Fl_Color; default: FL_BLACK
Text color in logging controls -->
<LOGGINGTEXTCOLOR>56</LOGGINGTEXTCOLOR>

<!-- type: Fl_Color; default: FL_BACKGROUND2_COLOR
Background color in logging controls -->
<LOGGINGCOLOR>7</LOGGINGCOLOR>

<!-- type: Fl_Font; default: FL_HELVETICA
Logging Controls font number -->
<LOGGINGTEXTFONT>0</LOGGINGTEXTFONT>

<!-- type: int; default: 12
Logging Controls font size -->
<LOGGINGTEXTSIZE>12</LOGGINGTEXTSIZE>

<!-- type: Fl_Color; default: FL_BLACK
Text color in logbook dialog -->
<LOGBOOKTEXTCOLOR>56</LOGBOOKTEXTCOLOR>

<!-- type: Fl_Color; default: FL_BACKGROUND2_COLOR
Background color in logbook dialog -->
<LOGBOOKCOLOR>7</LOGBOOKCOLOR>

<!-- type: Fl_Font; default: FL_HELVETICA
Logbook dialog controls font number -->
<LOGBOOKTEXTFONT>0</LOGBOOKTEXTFONT>

<!-- type: int; default: 12
Logbook dialog controls font size -->
<LOGBOOKTEXTSIZE>12</LOGBOOKTEXTSIZE>

<!-- type: std::string; default: &quot;&quot;
Frequency Control font name -->
<FREQCONTROLFONTNAME>mono</FREQCONTROLFONTNAME>

<!-- type: Fl_Font; default: FL_COURIER
Frequency Control font number -->
<FREQCONTROLFONTNBR>4</FREQCONTROLFONTNBR>

<!-- type: std::string; default: &quot;gtk+&quot;
FLTK UI scheme (none or base, gtk+, plastic) -->
<UISCHEME>gtk+</UISCHEME>

<!-- type: int; default: 0
UI language -->
<UILANGUAGE>0</UILANGUAGE>

<!-- type: bool; default: true
Always show audio frequencies on waterfall -->
<WFAUDIOSCALE>1</WFAUDIOSCALE>

<!-- type: RGB; default: { 0, 0, 0 }
Frequency display background color -->
<FDBACKGROUND>0 0 0</FDBACKGROUND>

<!-- type: RGB; default: { 0, 200, 0 }
Frequency display foreground color -->
<FDFOREGROUND>0 200 0</FDFOREGROUND>

<!-- type: Fl_Color; default: FL_BACKGROUND2_COLOR
UI tabs color -->
<TABSCOLOR>7</TABSCOLOR>

<!-- type: bool; default: true
Low frequency on bottom of viewer -->
<VIEWERASCEND>1</VIEWERASCEND>

<!-- type: bool; default: true
Signal Viewer text continuous scrolling -->
<VIEWERMARQUEE>1</VIEWERMARQUEE>

<!-- type: bool; default: false
Signal Viewer sort after channel changes- unused -->
<VIEWERSORT>0</VIEWERSORT>

<!-- type: bool; default: false
Signal Viewer playback history on select -->
<VIEWERHISTORY>0</VIEWERHISTORY>

<!-- type: bool; default: true
Signal Viewer data displayed on fixed 100 Hz intervals -->
<VIEWERfixed>1</VIEWERfixed>

<!-- type: int; default: VIEWER_LABEL_RF
Signal Viewer label type.  Values are as follows:
  0: None; 1: Audio freq; 2: Radio freq; 2: Channel #. -->
<VIEWERSHOWFREQ>2</VIEWERSHOWFREQ>

<!-- type: int; default: 30
Number of Signal Viewer Channels -->
<VIEWERCHANNELS>30</VIEWERCHANNELS>

<!-- type: int; default: 25
Width of viewer (% of full panel width) -->
<VIEWERWIDTH>25</VIEWERWIDTH>

<!-- type: int; default: 15
Signal Viewer inactivity timeout (to clear text) -->
<VIEWERTIMEOUT>15</VIEWERTIMEOUT>

<!-- type: std::string; default: &quot;&quot;
Signal Viewer font name -->
<VIEWERFONTNAME>mono</VIEWERFONTNAME>

<!-- type: Fl_Font; default: FL_COURIER
Signal Viewer font index -->
<VIEWERFONTNBR>4</VIEWERFONTNBR>

<!-- type: int; default: FL_NORMAL_SIZE
Signal Viewer font size -->
<VIEWERFONTSIZE>14</VIEWERFONTSIZE>

<!-- type: Fl_Color; default: FL_YELLOW
UI SQL button select color 1 -->
<SQL1COLOR>95</SQL1COLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI SQL button select color 2 -->
<SQL2COLOR>63</SQL2COLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI AFC button select color -->
<AFCCOLOR>63</AFCCOLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI Lk xmt frequ select color -->
<LKCOLOR>63</LKCOLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI Rev select color -->
<REVCOLOR>63</REVCOLOR>

<!-- type: Fl_Color; default: FL_RED
UI T/R select color -->
<XMTCOLOR>88</XMTCOLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI Spot select color -->
<SPOTCOLOR>63</SPOTCOLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI RxID select color -->
<RXIDCOLOR>63</RXIDCOLOR>

<!-- type: Fl_Color; default: FL_GREEN
UI TxID select color -->
<TXIDCOLOR>63</TXIDCOLOR>

<!-- type: Fl_Color; default: FL_RED
UI Tune select color -->
<TUNECOLOR>88</TUNECOLOR>

<!-- type: bool; default: false
Try to open remote xml logbook -->
<XML_LOGBOOK>0</XML_LOGBOOK>

<!-- type: std::string; default: &quot;127.0.0.1&quot;
Logbook server address -->
<XMLLOG_ADDRESS>127.0.0.1</XMLLOG_ADDRESS>

<!-- type: std::string; default: &quot;8421&quot;
Logbook server port -->
<XMLLOG_PORT>8421</XMLLOG_PORT>

<!-- type: bool; default: true
Check for updates when starting program -->
<DL_CHECK_FOR_UPDATES>1</DL_CHECK_FOR_UPDATES>

<!-- type: bool; default: false
(Set by fldigi) -->
<USEPSKREP>0</USEPSKREP>

<!-- type: bool; default: false
Report callsigns spotted in received text -->
<PSKREPAUTO>0</PSKREPAUTO>

<!-- type: bool; default: false
Report callsigns in logged QSOs -->
<PSKREPLOG>0</PSKREPLOG>

<!-- type: bool; default: false
Include rig frequency in reception report -->
<PSKREPQRG>0</PSKREPQRG>

<!-- type: std::string; default: &quot;report.pskreporter.info&quot;
Reception report server address -->
<PSKREPHOST>report.pskreporter.info</PSKREPHOST>

<!-- type: std::string; default: &quot;4739&quot;
Reception report server port -->
<PSKREPPORT>4739</PSKREPPORT>

<!-- type: std::string; default: &quot;&quot;
Short radio description -->
<MYRADIO></MYRADIO>

<!-- type: std::string; default: &quot;&quot;
Stationary listener latitude -->
<MYLAT></MYLAT>

<!-- type: std::string; default: &quot;&quot;
Stationary listener longitude -->
<MYLON></MYLON>

<!-- type: std::string; default: &quot;&quot;
Stationary listener altitude -->
<MYALT></MYALT>

<!-- type: int; default: 0
Tracking 0: nothing, 1: a flight, 2: a testing payload -->
<TRACKING_WHAT>2</TRACKING_WHAT>

<!-- type: std::string; default: &quot;&quot;
The selected flight or payload document id -->
<TRACKING_DOCID>010ea4913d68eaa248b09be16e6ca8f2</TRACKING_DOCID>

<!-- type: int; default: -1
The selected payload (belonging to the tracked filght) (index) -->
<TRACKING_FLIGHT_PAYLOAD>-1</TRACKING_FLIGHT_PAYLOAD>

<!-- type: int; default: -1
The selected transmission (index) -->
<TRACKING_TRANSMISSION>0</TRACKING_TRANSMISSION>

<!-- type: bool; default: false
GPS Enabled on startup? -->
<GPSENABLED>0</GPSENABLED>

<!-- type: std::string; default: &quot;&quot;
GPS Serial port -->
<GPSDEVICE></GPSDEVICE>

<!-- type: int; default: 0
GPS Serial baud -->
<GPSSPEED>0</GPSSPEED>

<!-- type: int; default: 30
GPS Upload period -->
<GPSPERIOD>30</GPSPERIOD>

<!-- type: int; default: 0
 -->
<PNG_WFALL>0</PNG_WFALL>

<!-- type: std::string; default: &quot;dl-fldigi-waterfall.png&quot;
Save location for PNG -->
<PNG_WFALL_LOC>dl-fldigi-waterfall.png</PNG_WFALL_LOC>

<!-- type: bool; default: false
 -->
<SSDV_SAVE_IMAGES>0</SSDV_SAVE_IMAGES>

<!-- type: std::string; default: &quot;&quot;
Save location for received images -->
<SSDV_SAVE_DIR></SSDV_SAVE_DIR>

<!-- type: bool; default: false
Adjust the RF frequency to match frequency drift -->
<TRACK_FREQ>0</TRACK_FREQ>

<!-- type: int; default: 1000
Minimum waterfall frequency -->
<TRACK_FREQ_MIN>1000</TRACK_FREQ_MIN>

<!-- type: int; default: 2000
Maximum waterfall frequency -->
<TRACK_FREQ_MAX>2000</TRACK_FREQ_MAX>

<!-- type: std::string; default: &quot;http://habitat.habhub.org&quot;
habitat CouchDB URI -->
<HABITAT_URI>http://habitat.habhub.org</HABITAT_URI>

<!-- type: std::string; default: &quot;habitat&quot;
habitat CouchDB databse -->
<HABITAT_DB>habitat</HABITAT_DB>

<!-- type: std::string; default: &quot;http://www.sanslogic.co.uk/ssdv/data.php&quot;
Remote URL -->
<SSDV_BLOCK_URL>http://www.sanslogic.co.uk/ssdv/data.php</SSDV_BLOCK_URL>

<!-- type: std::string; default: &quot;&quot;
Username for remote URL -->
<SSDV_BLOCK_USER></SSDV_BLOCK_USER>

<!-- type: std::string; default: &quot;&quot;
Password for remote URL -->
<SSDV_BLOCK_PASS></SSDV_BLOCK_PASS>

<!-- type: double; default: 0.0
Slant correction for wefax Rx -->
<WEFAXSLANT>0</WEFAXSLANT>

<!-- type: std::string; default: &quot;&quot;
Target directory for storing automatically received images storage -->
<WEFAXSAVEDIR></WEFAXSAVEDIR>

<!-- type: std::string; default: &quot;&quot;
Source directory for sending images -->
<WEFAXLOADDIR></WEFAXLOADDIR>

<!-- type: int; default: 0
Input filter for image reception -->
<WEFAXFILTER>0</WEFAXFILTER>

<!-- type: bool; default: true
Embedded GUI -->
<WEFAXEMBEDDEDGUI>1</WEFAXEMBEDDEDGUI>

<!-- type: bool; default: true
Hide transmission window -->
<WEFAXHIDETX>1</WEFAXHIDETX>

<!-- type: int; default: 800
Shift (Standard 800Hz) -->
<WEFAXSHIFT>800</WEFAXSHIFT>

<!-- type: int; default: 2900
Received fax maximum number of rows -->
<WEFAXMAXROWS>2900</WEFAXMAXROWS>

<!-- type: int; default: 1
Pixel margin for noise removal -->
<WEFAXNOISEMARGIN>1</WEFAXNOISEMARGIN>

<!-- type: int; default: 5
Threshold level for noise detection and removal -->
<WEFAXNOISETHRESHOLD>5</WEFAXNOISETHRESHOLD>

<!-- type: int; default: true
Save fax image as monochrome -->
<WEFAXSAVEMONOCHROME>1</WEFAXSAVEMONOCHROME>

<!-- type: bool; default: false
Logs wefax file names in Adif log file -->
<WEFAXADIFLOG>0</WEFAXADIFLOG>

<!-- type: bool; default: false
Logs Navtex messages in Adig log file -->
<NAVTEXADIFLOG>0</NAVTEXADIFLOG>

<!-- type: std::string; default: PKGDATADIR &quot;/NAVTEX_Stations.csv&quot;
Catalog pathname of Navtex stations -->
<NAVTEXCATALOG>/usr/local/share/dl-fldigi/NAVTEX_Stations.csv</NAVTEXCATALOG>

<!-- type: int; default: 0
Minimum length of logged messages -->
<NAVTEXMINSIZLOGGEDMSG>0</NAVTEXMINSIZLOGGEDMSG>

<!-- type: std::string; default: &quot;KMDQ&quot;
4 letter specifier for wx station -->
<WX_STA>KMDQ</WX_STA>

<!-- type: bool; default: true
weather conditions -->
<WX_CONDX>1</WX_CONDX>

<!-- type: bool; default: true
report in Fahrenheit -->
<WX_FAHRENHEIT>1</WX_FAHRENHEIT>

<!-- type: bool; default: true
report in Celsius -->
<WX_CELSIUS>1</WX_CELSIUS>

<!-- type: bool; default: true
report speed in miles per hour -->
<WX_MPH>1</WX_MPH>

<!-- type: bool; default: true
report speed in kilometers per hour -->
<WX_KPH>1</WX_KPH>

<!-- type: bool; default: true
report pressure in inches of mercury -->
<WX_INCHES>1</WX_INCHES>

<!-- type: bool; default: true
report pressure in millibars -->
<WX_MBARS>1</WX_MBARS>

<!-- type: bool; default: true
use complete METAR report -->
<WX_FULL>1</WX_FULL>

<!-- type: bool; default: true
report station noun name -->
<WX_STATION_NAME>1</WX_STATION_NAME>

</FLDIGI_DEFS>
